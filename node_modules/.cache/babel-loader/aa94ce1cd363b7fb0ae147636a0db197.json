{"ast":null,"code":"/**\n * Get the count of the longest repeating streak of `character` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} character\n *   Single character to look for.\n * @returns {number}\n *   Count of most frequent adjacent `character`s in `value`.\n */\nexport function longestStreak(value, character) {\n  const source = String(value);\n  let index = source.indexOf(character);\n  let expected = index;\n  let count = 0;\n  let max = 0;\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character');\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count;\n      }\n    } else {\n      count = 1;\n    }\n\n    expected = index + 1;\n    index = source.indexOf(character, expected);\n  }\n\n  return max;\n}","map":{"version":3,"sources":["/Users/barnabynapier/Documents/programming/personal-site/node_modules/longest-streak/index.js"],"names":["longestStreak","value","character","source","String","index","indexOf","expected","count","max","length","Error"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyC;AAC9C,QAAMC,MAAM,GAAGC,MAAM,CAACH,KAAD,CAArB;AACA,MAAII,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeJ,SAAf,CAAZ;AACA,MAAIK,QAAQ,GAAGF,KAAf;AACA,MAAIG,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,MAAI,OAAOP,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACQ,MAAV,KAAqB,CAA1D,EAA6D;AAC3D,UAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,SAAON,KAAK,KAAK,CAAC,CAAlB,EAAqB;AACnB,QAAIA,KAAK,KAAKE,QAAd,EAAwB;AACtB,UAAI,EAAEC,KAAF,GAAUC,GAAd,EAAmB;AACjBA,QAAAA,GAAG,GAAGD,KAAN;AACD;AACF,KAJD,MAIO;AACLA,MAAAA,KAAK,GAAG,CAAR;AACD;;AAEDD,IAAAA,QAAQ,GAAGF,KAAK,GAAG,CAAnB;AACAA,IAAAA,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeJ,SAAf,EAA0BK,QAA1B,CAAR;AACD;;AAED,SAAOE,GAAP;AACD","sourcesContent":["/**\n * Get the count of the longest repeating streak of `character` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} character\n *   Single character to look for.\n * @returns {number}\n *   Count of most frequent adjacent `character`s in `value`.\n */\nexport function longestStreak(value, character) {\n  const source = String(value)\n  let index = source.indexOf(character)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + 1\n    index = source.indexOf(character, expected)\n  }\n\n  return max\n}\n"]},"metadata":{},"sourceType":"module"}