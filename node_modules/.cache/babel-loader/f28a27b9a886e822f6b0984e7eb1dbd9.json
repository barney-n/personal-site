{"ast":null,"code":"/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\nimport { math } from 'micromark-extension-math';\nimport { mathFromMarkdown, mathToMarkdown } from 'mdast-util-math';\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\n\nexport default function remarkMath(options = {}) {\n  const data = this.data();\n  add('micromarkExtensions', math(options));\n  add('fromMarkdownExtensions', mathFromMarkdown());\n  add('toMarkdownExtensions', mathToMarkdown(options));\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n\n  function add(field, value) {\n    const list =\n    /** @type {unknown[]} */\n    // Other extensions\n\n    /* c8 ignore next 2 */\n    data[field] ? data[field] : data[field] = [];\n    list.push(value);\n  }\n}","map":{"version":3,"sources":["/Users/barnabynapier/Documents/programming/personal-site/node_modules/remark-math/index.js"],"names":["math","mathFromMarkdown","mathToMarkdown","remarkMath","options","data","add","field","value","list","push"],"mappings":"AAAA;;;;;;AAOA,SAAQA,IAAR,QAAmB,0BAAnB;AACA,SAAQC,gBAAR,EAA0BC,cAA1B,QAA+C,iBAA/C;AAEA;;;;;;AAKA,eAAe,SAASC,UAAT,CAAoBC,OAAO,GAAG,EAA9B,EAAkC;AAC/C,QAAMC,IAAI,GAAG,KAAKA,IAAL,EAAb;AAEAC,EAAAA,GAAG,CAAC,qBAAD,EAAwBN,IAAI,CAACI,OAAD,CAA5B,CAAH;AACAE,EAAAA,GAAG,CAAC,wBAAD,EAA2BL,gBAAgB,EAA3C,CAAH;AACAK,EAAAA,GAAG,CAAC,sBAAD,EAAyBJ,cAAc,CAACE,OAAD,CAAvC,CAAH;AAEA;;;;;AAIA,WAASE,GAAT,CAAaC,KAAb,EAAoBC,KAApB,EAA2B;AACzB,UAAMC,IAAI;AAAG;AACX;;AACA;AACAJ,IAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcF,IAAI,CAACE,KAAD,CAAlB,GAA6BF,IAAI,CAACE,KAAD,CAAJ,GAAc,EAH7C;AAMAE,IAAAA,IAAI,CAACC,IAAL,CAAUF,KAAV;AACD;AACF","sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\n\nimport {math} from 'micromark-extension-math'\nimport {mathFromMarkdown, mathToMarkdown} from 'mdast-util-math'\n\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\nexport default function remarkMath(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', math(options))\n  add('fromMarkdownExtensions', mathFromMarkdown())\n  add('toMarkdownExtensions', mathToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}