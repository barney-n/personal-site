{"version":3,"sources":["components/ScrollToTop.js","components/CustomNavbar.js","components/Footer.js","components/Layout.js","pages/Home.js","pages/PostPage.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","CustomNavbar","react_default","a","createElement","className","sticky","react_router_dom","to","Footer","Layout","_ref","children","CustomNavbar_CustomNavbar","Footer_Footer","HomePage","components_Layout","href","target","postlist","length","map","post","i","key","concat","id","title","date","PostPage","validId","useParams","react_router","fetchedPost","postExists","forEach","content","react_markdown","linkTarget","remarkPlugins","remarkMath","rehypePlugins","rehypeKatex","NotFound","App","path","element","pages_PostPage","pages_NotFound","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82f2436d.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles/CustomNavbar.css\";\n\nexport default function CustomNavbar() {\n  return (\n    <div className=\"navbar\">\n      <nav sticky=\"top\">\n        <Link className=\"navbrand\" to={\"/\"}>\n          B. Napier\n        </Link>\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles/Footer.css\";\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      {/*    <a\n         className=\"footer-message\"\n         href=\"https://en.wikipedia.org/wiki/Special:Random\"\n         target=\"_blank\"\n       >\n         Click Me\n       </a> */}\n    </div>\n  );\n}\n","import React from \"react\";\nimport CustomNavbar from \"./CustomNavbar\";\nimport \"./styles/Layout.css\";\nimport Footer from \"./Footer\";\n\nconst Layout = ({ children }) => {\n  return (\n    <div className=\"layout\">\n      <CustomNavbar />\n      <div className=\"layout-body\">\n        <div>{children}</div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Link } from \"react-router-dom\";\nimport postlist from \"../posts.json\";\n\nexport default function HomePage() {\n  return (\n    <Layout>\n      <div className=\"page-content\">\n        <p>\n          I'm Barney, I'm currently a quant researcher at a hedge fund but am\n          interested in a lot of random things too. Sometimes I write about\n          things that interest me (usually relating to markets, computing, or\n          philosophy), and you can find those writings below.\n        </p>\n        <p>\n          If you want to get in touch and chat about something, just drop me a\n          line on{\" \"}\n          <a\n            className=\"link\"\n            href=\"https://twitter.com/barney_napier\"\n            target=\"_blank\"\n          >\n            Twitter\n          </a>\n          . I prefer it to email, because I can block you if I want.\n        </p>\n      </div>\n      <h2>Projects</h2>\n      <h3>Bookism</h3>\n      <a href=\"https://bookism.co.uk\" target=\"_blank\">\n        Bookism\n      </a>{\" \"}\n      is a website devoted to helping people read better for longer. It's a\n      combination of posts about what you should and could read, as well as an\n      extensive database of my own personal book reviews.\n      <h3>Jitsmap</h3>I train in Brazilian Jiu Jitsu and love it. I often take\n      notes on techniques to better understand how everything fits together. All\n      my notes are in a graph based notes tool called obsidian. So my BJJ notes\n      are like a large map which I have published online to help others improve\n      in the early stages of their BJJ journey.\n      <h2>Writing</h2>\n      <div className=\"postlist\">\n        {postlist.length &&\n          postlist.map((post, i) => {\n            return (\n              <div key={i} className=\"post-card\">\n                <p>\n                  {\" \"}\n                  <Link className=\"link post-link\" to={`/post/${post.id}`}>\n                    {post.title}\n                  </Link>\n                  <br />\n                  <text className=\"date\">{post.date}</text>\n                </p>\n              </div>\n            );\n          })}\n      </div>\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport { useParams, Navigate } from \"react-router-dom\";\nimport Markdown from \"react-markdown\";\nimport postlist from \"../posts.json\";\nimport Layout from \"../components/Layout\";\nimport remarkMath from \"remark-math\";\nimport rehypeKatex from \"rehype-katex\";\nimport \"katex/dist/katex.min.css\";\nimport \"./styles/PostPage.css\";\n\nconst PostPage = () => {\n  const params = useParams();\n  const validId = params.id;\n  if (!validId) {\n    return <Navigate to=\"/404\" />;\n  }\n  const fetchedPost = {};\n  let postExists = false;\n  postlist.forEach((post, i) => {\n    if (validId === post.id) {\n      fetchedPost.title = post.title ? post.title : \"No title given\";\n      fetchedPost.date = post.date ? post.date : \"No date given\";\n      fetchedPost.content = post.content ? post.content : \"No content given\";\n      postExists = true;\n    }\n  });\n  if (postExists === false) {\n    return <Navigate to=\"/404\" />;\n  }\n  return (\n    <Layout>\n      <div className=\"post\">\n        <div className=\"title-info\">\n          <h1 className=\"page-title\">{fetchedPost.title}</h1>\n          <small>{fetchedPost.date}</small>\n          <hr />\n        </div>\n        <Markdown\n          linkTarget=\"_blank\"\n          className=\"markdown\"\n          children={fetchedPost.content}\n          remarkPlugins={[remarkMath]}\n          rehypePlugins={[rehypeKatex]}\n        />\n      </div>\n    </Layout>\n  );\n};\n\nexport default PostPage;\n","import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport \"./styles/NotFound.css\";\n\nconst NotFound = () => {\n  return (\n    <Layout>\n      <h1 className=\"notfound\">Page not found</h1>\n    </Layout>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\nimport ScrollToTop from \"./components/ScrollToTop\";\n\nimport HomePage from \"./pages/Home\";\nimport PostPage from \"./pages/PostPage\";\nimport NotFound from \"./pages/NotFound\";\n\nexport default function App() {\n  return (\n    <HashRouter>\n      <ScrollToTop />\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/post/:id\" element={<PostPage />} />\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}