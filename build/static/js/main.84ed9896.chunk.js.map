{"version":3,"sources":["components/CustomNavlink.js","components/CustomNavbar.js","components/Layout.js","pages/About.js","pages/PostPage.js","pages/AllPosts.js","pages/NotFound.js","pages/AllBooks.js","pages/BookPage.js","App.js","serviceWorker.js","index.js"],"names":["CustomNavlink","props","react_default","a","createElement","react_router_dom","className","to","style","borderBlockColor","window","location","href","substring","lastIndexOf","text","CustomNavbar","expand","sticky","CustomNavlink_CustomNavlink","Layout","_ref","children","CustomNavbar_CustomNavbar","AboutPage","components_Layout","react_markdown","linkTarget","pages","content","PostPage","validId","useParams","id","react_router","fetchedPost","postExists","postlist","forEach","post","i","title","date","remarkPlugins","remarkMath","rehypePlugins","rehypeKatex","AllPosts","length","map","key","concat","NotFound","AllBooks","booklist","book","alt","src","isbn","BookPage","fetchedbook","bookExists","author","rating","App","path","element","pages_AllPosts","pages_AllBooks","pages_PostPage","pages_BookPage","pages_NotFound","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAIe,SAASA,EAAcC,GAepC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,UACVC,GAAIN,EAAMM,GACVC,MAAO,CACLC,iBAhBgBC,OAAOC,SAASC,KAAKC,UACvCH,OAAOC,SAASC,KAAKE,YAAY,QAGfb,EAAMM,GAYc,WAAa,gBAGlDN,EAAMc,YCtBE,SAASC,IACtB,OACEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKa,OAAO,KAAKC,OAAO,OACtBhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,WAAWC,GAAI,KAA/B,aAGAL,EAAAC,EAAAC,cAAA,QAAME,UAAU,WACdJ,EAAAC,EAAAC,cAACe,EAAD,CAAeZ,GAAG,IAAIQ,KAAK,YAC3Bb,EAAAC,EAAAC,cAACe,EAAD,CAAeZ,GAAG,aAAaQ,KAAK,cACpCb,EAAAC,EAAAC,cAACe,EAAD,CAAeZ,GAAG,SAASQ,KAAK,uBCA3BK,EAXA,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAChB,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,WAAMkB,MCJC,SAASE,IACtB,OACEtB,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAUC,WAAW,SAASL,SAAUM,EAAK,MAAUC,wCCoChDC,SApCE,WACf,IACMC,EADSC,cACQC,GACvB,IAAKF,EACH,OAAO7B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAU3B,GAAG,SAEtB,IAAM4B,EAAc,GAChBC,GAAa,EASjB,OARAC,EAASC,QAAQ,SAACC,EAAMC,GAClBT,IAAYQ,EAAKN,KACnBE,EAAYM,MAAQF,EAAKE,MAAQF,EAAKE,MAAQ,iBAC9CN,EAAYO,KAAOH,EAAKG,KAAOH,EAAKG,KAAO,gBAC3CP,EAAYN,QAAUU,EAAKV,QAAUU,EAAKV,QAAU,mBACpDO,GAAa,MAGE,IAAfA,EACKlC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAU3B,GAAG,SAGpBL,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,UAAK+B,EAAYM,OACjBvC,EAAAC,EAAAC,cAAA,6BAAqB+B,EAAYO,MACjCxC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACEC,WAAW,SACXL,SAAUa,EAAYN,QACtBc,cAAe,CAACC,KAChBC,cAAe,CAACC,WCEXC,UAlCE,WACf,OACE7C,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAf,+JAG2B,IACzBJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,OAAOC,GAAE,cAAzB,cAIFL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACZ+B,EAASW,QACRX,EAASY,IAAI,SAACV,EAAMC,GAClB,OACEtC,EAAAC,EAAAC,cAAA,OAAK8C,IAAKV,EAAGlC,UAAU,aACrBJ,EAAAC,EAAAC,cAAA,SACG,IACDF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,OAAOC,GAAE,SAAA4C,OAAWZ,EAAKN,KACtCM,EAAKE,OAEP,MACDvC,EAAAC,EAAAC,cAAA,QAAME,UAAU,QAAQiC,EAAKG,cClBhCU,UARE,WACf,OACElD,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,6BC4BS+C,UA7BE,WACf,OACEnD,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAf,wBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACZgD,EAASN,QACRM,EAASL,IAAI,SAACM,EAAMf,GAClB,OACEtC,EAAAC,EAAAC,cAAA,OAAK8C,IAAKV,EAAGlC,UAAU,aACrBJ,EAAAC,EAAAC,cAAA,SACG,IACDF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,OAAOC,GAAE,SAAA4C,OAAWI,EAAKtB,KACvC/B,EAAAC,EAAAC,cAAA,OACEoD,IAAKD,EAAKd,MACVgB,IAAG,yCAAAN,OAA2CI,EAAKG,KAAhD,qBC2BVC,EAtCE,WACf,IACM5B,EADSC,cACQC,GACvB,IAAKF,EACH,OAAO7B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAU3B,GAAG,SAEtB,IAAMqD,EAAc,GAChBC,GAAa,EAWjB,OAVAP,EAAShB,QAAQ,SAACiB,EAAMf,GAClBT,IAAYwB,EAAKtB,KACnB2B,EAAYnB,MAAQc,EAAKd,MAAQc,EAAKd,MAAQ,iBAC9CmB,EAAYE,OAASP,EAAKO,OAASP,EAAKO,OAAS,kBACjDF,EAAYlB,KAAOa,EAAKb,KAAOa,EAAKb,KAAO,gBAC3CkB,EAAYG,OAASR,EAAKQ,OAASR,EAAKQ,OAAS,kBACjDH,EAAY/B,QAAU0B,EAAK1B,QAAU0B,EAAK1B,QAAU,mBACpDgC,GAAa,MAGE,IAAfA,EACK3D,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAU3B,GAAG,SAGpBL,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,UAAKwD,EAAYnB,OACjBvC,EAAAC,EAAAC,cAAA,6BAAqBwD,EAAYlB,MACjCxC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACEC,WAAW,SACXL,SAAUsC,EAAY/B,QACtBc,cAAe,CAACC,KAChBC,cAAe,CAACC,UC7BX,SAASkB,IACtB,OACE9D,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO+B,KAAK,IAAIC,QAAShE,EAAAC,EAAAC,cAAC+D,EAAD,QACzBjE,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO+B,KAAK,SAASC,QAAShE,EAAAC,EAAAC,cAACoB,EAAD,QAC9BtB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO+B,KAAK,aAAaC,QAAShE,EAAAC,EAAAC,cAACgE,EAAD,QAClClE,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO+B,KAAK,YAAYC,QAAShE,EAAAC,EAAAC,cAACiE,EAAD,QACjCnE,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO+B,KAAK,YAAYC,QAAShE,EAAAC,EAAAC,cAACkE,EAAD,QACjCpE,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAO+B,KAAK,IAAIC,QAAShE,EAAAC,EAAAC,cAACmE,EAAD,UCRbC,QACW,cAA7B9D,OAAOC,SAAS8D,UAEe,UAA7B/D,OAAOC,SAAS8D,UAEhB/D,OAAOC,SAAS8D,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAAC4D,EAAD,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.84ed9896.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/CustomNavlink.css\";\n\nexport default function CustomNavlink(props) {\n  // This function tells me if the link is shown\n\n  function isCurrentLink() {\n    const currentLink = window.location.href.substring(\n      window.location.href.lastIndexOf(\"/\")\n    );\n\n    if (currentLink === props.to) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    <Link\n      className=\"navlink\"\n      to={props.to}\n      style={{\n        borderBlockColor: isCurrentLink() ? \"darkgray\" : \"transparent\",\n      }}\n    >\n      {props.text}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CustomNavlink from \"../components/CustomNavlink\";\nimport \"../styles/CustomNavbar.css\";\n\nexport default function CustomNavbar() {\n  return (\n    <div className=\"navbar\">\n      <nav expand=\"md\" sticky=\"top\">\n        <Link className=\"navbrand\" to={\"/\"}>\n          B. Napier\n        </Link>\n        <span className=\"navtabs\">\n          <CustomNavlink to=\"/\" text=\"Writing\" />\n          <CustomNavlink to=\"/bookshelf\" text=\"Bookshelf\" />\n          <CustomNavlink to=\"/about\" text=\"About\" />\n        </span>\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport CustomNavbar from \"./CustomNavbar\";\nimport \"../styles/Layout.css\";\n\nconst Layout = ({ children }) => {\n  return (\n    <div className=\"layout\">\n      <CustomNavbar />\n      <div className=\"layout-body\">\n        <div>{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport pages from \"../pages.json\";\nimport Markdown from \"react-markdown\";\nimport Layout from \"../components/Layout\";\n\nexport default function AboutPage() {\n  return (\n    <Layout>\n      <div className=\"page-content\">\n        <Markdown linkTarget=\"_blank\" children={pages[\"About\"].content} />\n      </div>\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport { useParams, Navigate } from \"react-router-dom\";\nimport Markdown from \"react-markdown\";\nimport postlist from \"../posts.json\";\nimport Layout from \"../components/Layout\";\nimport remarkMath from \"remark-math\";\nimport rehypeKatex from \"rehype-katex\";\nimport \"katex/dist/katex.min.css\";\n\nconst PostPage = () => {\n  const params = useParams();\n  const validId = params.id;\n  if (!validId) {\n    return <Navigate to=\"/404\" />;\n  }\n  const fetchedPost = {};\n  let postExists = false;\n  postlist.forEach((post, i) => {\n    if (validId === post.id) {\n      fetchedPost.title = post.title ? post.title : \"No title given\";\n      fetchedPost.date = post.date ? post.date : \"No date given\";\n      fetchedPost.content = post.content ? post.content : \"No content given\";\n      postExists = true;\n    }\n  });\n  if (postExists === false) {\n    return <Navigate to=\"/404\" />;\n  }\n  return (\n    <Layout>\n      <div className=\"post\">\n        <h1>{fetchedPost.title}</h1>\n        <small>Published on {fetchedPost.date}</small>\n        <hr />\n        <Markdown\n          linkTarget=\"_blank\"\n          children={fetchedPost.content}\n          remarkPlugins={[remarkMath]}\n          rehypePlugins={[rehypeKatex]}\n        />\n      </div>\n    </Layout>\n  );\n};\n\nexport default PostPage;\n","import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Link } from \"react-router-dom\";\nimport postlist from \"../posts.json\";\nimport \"../styles/AllPosts.css\";\n\nconst AllPosts = () => {\n  return (\n    <Layout>\n      <div className=\"welcome-message\">\n        Hi there, I'm Barney and welcome to my site. Below is a list of my\n        writing on various topics. If you want to read my book notes and\n        reviews, head over to my{\" \"}\n        <Link className=\"link\" to={`/bookshelf`}>\n          bookshelf\n        </Link>\n      </div>\n      <br />\n      <hr />\n      <div className=\"postlist\">\n        {postlist.length &&\n          postlist.map((post, i) => {\n            return (\n              <div key={i} className=\"post-card\">\n                <p>\n                  {\" \"}\n                  <Link className=\"link\" to={`/post/${post.id}`}>\n                    {post.title}\n                  </Link>\n                  {\",  \"}\n                  <text className=\"date\">{post.date}</text>\n                </p>\n              </div>\n            );\n          })}\n      </div>\n    </Layout>\n  );\n};\n\nexport default AllPosts;\n","import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport \"../styles/NotFound.css\";\n\nconst NotFound = () => {\n  return (\n    <Layout>\n      <h1 className=\"notfound\">Page not found</h1>\n    </Layout>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport { Link } from \"react-router-dom\";\nimport booklist from \"../books.json\";\nimport \"../styles/AllBooks.css\";\n\nconst AllBooks = () => {\n  return (\n    <Layout>\n      <div className=\"welcome-message\">This is my bookshelf</div>\n      <div className=\"booklist\">\n        {booklist.length &&\n          booklist.map((book, i) => {\n            return (\n              <div key={i} className=\"book-card\">\n                <p>\n                  {\" \"}\n                  <Link className=\"link\" to={`/book/${book.id}`}>\n                    <img\n                      alt={book.title}\n                      src={`https://covers.openlibrary.org/b/isbn/${book.isbn}-M.jpg`}\n                    ></img>\n                    {/* {book.title} */}\n                  </Link>\n                  {/* {\",  \"} */}\n                  {/* <text className=\"date\">{book.date}</text> */}\n                </p>\n              </div>\n            );\n          })}\n      </div>\n    </Layout>\n  );\n};\n\nexport default AllBooks;\n","import React from \"react\";\nimport { useParams, Navigate } from \"react-router-dom\";\nimport Markdown from \"react-markdown\";\nimport booklist from \"../books.json\";\nimport Layout from \"../components/Layout\";\nimport remarkMath from \"remark-math\";\nimport rehypeKatex from \"rehype-katex\";\nimport \"katex/dist/katex.min.css\";\n\nconst BookPage = () => {\n  const params = useParams();\n  const validId = params.id;\n  if (!validId) {\n    return <Navigate to=\"/404\" />;\n  }\n  const fetchedbook = {};\n  let bookExists = false;\n  booklist.forEach((book, i) => {\n    if (validId === book.id) {\n      fetchedbook.title = book.title ? book.title : \"No title given\";\n      fetchedbook.author = book.author ? book.author : \"No author given\";\n      fetchedbook.date = book.date ? book.date : \"No date given\";\n      fetchedbook.rating = book.rating ? book.rating : \"No rating given\";\n      fetchedbook.content = book.content ? book.content : \"No content given\";\n      bookExists = true;\n    }\n  });\n  if (bookExists === false) {\n    return <Navigate to=\"/404\" />;\n  }\n  return (\n    <Layout>\n      <div className=\"book\">\n        <h1>{fetchedbook.title}</h1>\n        <small>Published on {fetchedbook.date}</small>\n        <hr />\n        <Markdown\n          linkTarget=\"_blank\"\n          children={fetchedbook.content}\n          remarkPlugins={[remarkMath]}\n          rehypePlugins={[rehypeKatex]}\n        />\n      </div>\n    </Layout>\n  );\n};\n\nexport default BookPage;\n","import React from \"react\";\n\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nimport AboutPage from \"./pages/About\";\nimport PostPage from \"./pages/PostPage\";\nimport AllPosts from \"./pages/AllPosts\";\nimport NotFound from \"./pages/NotFound\";\nimport AllBooks from \"./pages/AllBooks\";\nimport BookPage from \"./pages/BookPage\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<AllPosts />} />\n        <Route path=\"/about\" element={<AboutPage />} />\n        <Route path=\"/bookshelf\" element={<AllBooks />} />\n        <Route path=\"/post/:id\" element={<PostPage />} />\n        <Route path=\"/book/:id\" element={<BookPage />} />\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}